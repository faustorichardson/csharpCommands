
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.ReportSource;
using CrystalDecisions.Shared;
using CrystalDecisions.Windows.Forms;
using CrystalDecisions.VSDesigner;
using CrystalDecisions.Web;
using CrystalDecisions.Windows;
using System.Drawing.Imaging;
using System.IO;
using VFPToolkit;


==================================================
GENERANDO REPORTE CON FRMPRINTER - Metodo Imprimir
==================================================

            //Conexion a la base de datos
            MySqlConnection myConexion = new MySqlConnection(Conexion.ConectionString);            
            // Creando el command que ejecutare
            MySqlCommand myCommand = new MySqlCommand();
            // Creando el Data Adapter
            MySqlDataAdapter myAdapter = new MySqlDataAdapter();
            // Creando el String Builder
            StringBuilder sbQuery = new StringBuilder();            
            // Otras variables del entorno
            string cWhere = " WHERE 1 = 1";
            string cUsuario = "";
            string cTitulo = "";

            try
            {
                // Abro conexion
                myConexion.Open();
                // Creo comando
                myCommand = myConexion.CreateCommand();
                // Adhiero el comando a la conexion
                myCommand.Connection = myConexion;
                // Filtros de la busqueda
                if (rbTodos.Checked)
                {
                    string fechadesde = fechaDesde.Value.ToString("yyyy-MM-dd");
                    string fechahasta = fechaHasta.Value.ToString("yyyy-MM-dd");
                    cWhere = cWhere + " AND fechacita >= "+"'"+ fechadesde +"'" +" AND fechacita <= "+"'"+ fechahasta +"'"+"";
                    sbQuery.Clear();
                    sbQuery.Append("SELECT cita.idcita,cita.fechacita,cita.cedulapaciente,upper(CONCAT(paciente.nombre,' ',paciente.apellido)) as paciente,");
                    sbQuery.Append(" doctores.doctores_cedula,upper(CONCAT(doctores.doctores_nombre,' ',doctores.doctores_apellido)) as doctor,departamentos.departamento_descripcion");
                    sbQuery.Append(" FROM cita ");
                    sbQuery.Append(" INNER JOIN paciente ON paciente.cedula = cita.cedulapaciente");
                    sbQuery.Append(" INNER JOIN doctores ON doctores.doctores_cedula = cita.ceduladoctor");
                    sbQuery.Append(" INNER JOIN departamentos ON departamentos.departamento_id = cita.referimiento");
                    sbQuery.Append(cWhere);
                }
                else if (rbDoctor.Checked)
                {
                    string fechadesde = fechaDesde.Value.ToString("yyyy-MM-dd");
                    string fechahasta = fechaHasta.Value.ToString("yyyy-MM-dd");
                    cWhere = cWhere + " AND fechacita >= " + "'" + fechadesde + "'" + " AND fechacita <= " + "'" + fechahasta + "'" + "";
                    cWhere = cWhere + " AND ceduladoctor = " +"'"+ txtCedula.Text +"'"+"";
                    sbQuery.Clear();
                    sbQuery.Append("SELECT cita.idcita,cita.fechacita,cita.cedulapaciente,upper(CONCAT(paciente.nombre,' ',paciente.apellido)) as paciente,");
                    sbQuery.Append(" doctores.doctores_cedula,upper(CONCAT(doctores.doctores_nombre,' ',doctores.doctores_apellido)) as doctor,departamentos.departamento_descripcion");
                    sbQuery.Append(" FROM cita ");
                    sbQuery.Append(" INNER JOIN paciente ON paciente.cedula = cita.cedulapaciente");
                    sbQuery.Append(" INNER JOIN doctores ON doctores.doctores_cedula = cita.ceduladoctor");
                    sbQuery.Append(" INNER JOIN departamentos ON departamentos.departamento_id = cita.referimiento");
                    sbQuery.Append(cWhere);
                }
                else if (rbEspecialidad.Checked)
                {
                    string fechadesde = fechaDesde.Value.ToString("yyyy-MM-dd");
                    string fechahasta = fechaHasta.Value.ToString("yyyy-MM-dd");                    
                    string varEspecialidad = (cmbEspecialidad.SelectedValue).ToString();
                    cWhere = cWhere + " AND fechacita >= " + "'" + fechadesde + "'" + " AND fechacita <= " + "'" + fechahasta + "'" + "";
                    cWhere = cWhere + " AND referimiento = " + varEspecialidad +"";
                    sbQuery.Clear();
                    sbQuery.Append("SELECT cita.idcita,cita.fechacita,cita.cedulapaciente,upper(CONCAT(paciente.nombre,' ',paciente.apellido)) as paciente,");
                    sbQuery.Append(" doctores.doctores_cedula,upper(CONCAT(doctores.doctores_nombre,' ',doctores.doctores_apellido)) as doctor,departamentos.departamento_descripcion");
                    sbQuery.Append(" FROM cita ");
                    sbQuery.Append(" INNER JOIN paciente ON paciente.cedula = cita.cedulapaciente");
                    sbQuery.Append(" INNER JOIN doctores ON doctores.doctores_cedula = cita.ceduladoctor");
                    sbQuery.Append(" INNER JOIN departamentos ON departamentos.departamento_id = cita.referimiento");
                    sbQuery.Append(cWhere);
                }

                // Paso los valores de sbQuery al CommandText
                myCommand.CommandText = sbQuery.ToString();
                // Creo el objeto Data Adapter y ejecuto el command en el
                myAdapter = new MySqlDataAdapter(myCommand);
                // Creo el objeto Data Table
                DataTable dtCita = new DataTable();
                // Lleno el data adapter
                myAdapter.Fill(dtCita);
                // Cierro el objeto conexion
                myConexion.Close();

                // Verifico cantidad de datos encontrados
                int nRegistro = dtCita.Rows.Count;
                if (nRegistro == 0)
                {
                    MessageBox.Show("No Hay Datos Para Mostrar, Favor Verificar", "Sistema Dispensario Medico", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                else
                {
                    //1ero.HACEMOS LA COLECCION DE PARAMETROS
                    //los campos de parametros contiene un objeto para cada campo de parametro en el informe
                    ParameterFields oParametrosCR = new ParameterFields();
                    //Proporciona propiedades para la recuperacion y configuracion del tipo de los parametros
                    ParameterValues oParametrosValuesCR = new ParameterValues();

                    //2do.CREAMOS LOS PARAMETROS
                    ParameterField oUsuario = new ParameterField();
                    //parametervaluetype especifica el TIPO de valor de parametro
                    //ParameterValueKind especifica el tipo de valor de parametro en la PARAMETERVALUETYPE de la Clase PARAMETERFIELD
                    oUsuario.ParameterValueType = ParameterValueKind.StringParameter;

                    //3ero.VALORES PARA LOS PARAMETROS
                    //ParameterDiscreteValue proporciona propiedades para la recuperacion y configuracion de 
                    //parametros de valores discretos
                    ParameterDiscreteValue oUsuarioDValue = new ParameterDiscreteValue();
                    oUsuarioDValue.Value = cUsuario;

                    //4to. AGREGAMOS LOS VALORES A LOS PARAMETROS
                    oUsuario.CurrentValues.Add(oUsuarioDValue);


                    //5to. AGREGAMOS LOS PARAMETROS A LA COLECCION 
                    oParametrosCR.Add(oUsuario);

                    //nombre del parametro en CR (Crystal Reports)
                    oParametrosCR[0].Name = "cUsuario";

                    //nombre del TITULO DEL INFORME
                    cTitulo = "REPORTE DE CITAS MEDICAS";

                    //6to Instanciamos nuestro REPORTE
                    //Reportes.ListadoDoctores oListado = new Reportes.ListadoDoctores();
                    Reportes.rptCitas orptCitas = new Reportes.rptCitas();
                    
                    //pasamos el nombre del TITULO del Listado
                    //SumaryInfo es un objeto que se utiliza para leer,crear y actualizar las propiedades del reporte
                   // oListado.SummaryInfo.ReportTitle = cTitulo;

                    orptCitas.SummaryInfo.ReportTitle = cTitulo;

                    //7mo. instanciamos nuestro el FORMULARIO donde esta nuestro ReportViewer
                    frmPrinter ofrmPrinter = new frmPrinter(dtCita, orptCitas, cTitulo);
                    
                    //ParameterFieldInfo Obtiene o establece la colección de campos de parámetros.
                    ofrmPrinter.CrystalReportViewer1.ParameterFieldInfo = oParametrosCR;
                    ofrmPrinter.ShowDialog();
                }


            }
            catch (Exception myEx)
            {
                MessageBox.Show("Error : " +  myEx.Message, "Mostrando Reporte", MessageBoxButtons.OK,
                                    MessageBoxIcon.Information);
                ExceptionLog.LogError(myEx, false);
                return;
            }

==
Generar Reporte
==

	    MySql.Data.MySqlClient.MySqlConnection oCnn = new MySql.Data.MySqlClient.MySqlConnection();  // Objeto de conexion a la base de datos
            MySql.Data.MySqlClient.MySqlDataAdapter daDatos = new MySql.Data.MySqlClient.MySqlDataAdapter(); // Objeto Adaptador para leer datos de la Base de datos
            MySql.Data.MySqlClient.MySqlCommand cmdExec = new MySqlCommand(); // objeto comando para ejecutar sentencias sql
            DataTable dtDatos = new DataTable(); // datatable para recibir los datos de la base de datos
            StringBuilder sbQuery = new StringBuilder(); //Iniciar el cuadro de diálogo de entretenimiento:

            try
            {
                oCnn.ConnectionString = GlobalAccess.cnCadena();
                oCnn.Open();
                cmdExec = oCnn.CreateCommand();
                cmdExec.Connection = oCnn;

                //string cTitulo2 = " 'Listado de Tipos de Entradas' as Titulo";
                //string cWhere = " 1 = 1 ";
                //string cOrderBy = " order by tp_ent";

                // Construyo el query
                sbQuery.Append("select reaseguro_ramos.id_ramo, reaseguro_ramos.desc_ramo, ");
                sbQuery.Append("right(empre_mo.nom_empre,26) as nom_empre, empre_mo.telefono,empre_mo.fax,empre_mo.webSite as PaginaWeb,empre_mo.rnc, ");
                sbQuery.Append("empre_mo.direc1,empre_mo.email,empre_mo.logo,empre_mo.foto");
                sbQuery.Append(" from reaseguro_ramos,empre_mo");
                sbQuery.Append(" where empre_mo.cod_empre = " + FrmAcceso.iempresa + "");
                //sbQuery.Append("");


                cmdExec.CommandText = sbQuery.ToString();

                daDatos = new MySqlDataAdapter(cmdExec);
                daDatos.Fill(dtDatos);
                int nRegistros = dtDatos.Rows.Count;
                if (nRegistros == 0)
                {
                    MessageBox.Show("No hay información para mostrar, favor verificar", "Mostrando Listado de Cedente", MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
                    return;
                }


                string cUsuario = FrmAcceso.cUsuarioActual;

                // Colecciones
                ParameterFields oParametrosCR = new ParameterFields();
                ParameterValues oParametrosValuesCR = new ParameterValues();

                // parametro
                ParameterField oUsuario = new ParameterField();
                oUsuario.ParameterValueType = ParameterValueKind.StringParameter;

                // Valores para los prametros
                ParameterDiscreteValue oUsuarioDValue = new ParameterDiscreteValue();
                oUsuarioDValue.Value = cUsuario;

                // Agrego los valores a los parametros
                oUsuario.CurrentValues.Add(oUsuarioDValue);

                // Agrego los parametros a la coleccion
                oParametrosCR.Add(oUsuario);

                // Nombre del Parametro en CR
                oParametrosCR[0].Name = "cUsuario";
                string cTitulo = "Listado General de Ramos";

                // metodo con la clase del informe
                Reportes.rptTest oReporte = new Reportes.rptTest();
                oReporte.SummaryInfo.ReportTitle = cTitulo;
                frmPrinter ofrmPrinter = new frmPrinter(dtDatos, oReporte, cTitulo);
                ofrmPrinter.CrystalReportViewer1.ParameterFieldInfo = oParametrosCR;
                ofrmPrinter.ShowDialog();
            }
            catch (Exception ex)
            {

                MessageBox.Show("Error : " + ex.Message, "Mostrando Reporte", MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
                ExceptionLog.LogError(ex, false);
                return;
            }